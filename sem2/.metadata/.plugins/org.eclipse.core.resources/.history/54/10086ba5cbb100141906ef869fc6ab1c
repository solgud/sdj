package utility.collection;

import java.util.EmptyStackException;

public class ArrayStack<T> implements StackADT<T> {

	private static final int DEFAULT_CAPACITY = 100;
	private int top;
	private T[] stack;
	private int[] ints;
	
	public ArrayStack() {
		this(DEFAULT_CAPACITY);
	}
	
	public ArrayStack(int initialCapacity) {
		this.top = 0;
		this.stack = (T[]) new Object[initialCapacity];
	}


	@Override
	public void push(T element) {
		if(size() == stack.length) {
			expandCapacity();
		}
		stack[top++] = element;
	}

	@Override
	public T pop() {
		if(isEmpty()) {
			throw new EmptyStackException();
		}
		T result = stack[--top]; // Record the last element
		stack[top] = null; // Remove the last element
		return result; // Return the recorded element
	}

	@Override
	public T peek() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int indexOf(T element) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int size() {
		return this.top;
	}
	
	public String toString() {
		return null;
	}
	
	public void expandCapacity() {
		
	}


}
